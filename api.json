{
  "openapi": "3.0.1",
  "info": {
    "title": "Public API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.sandbox.keyrails.com",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/api/v1/accounts": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create new account for tenant or client.",
        "requestBody": {
          "description": "PublicApiCreateAccountRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateAccountRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateAccountRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateAccountRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Account with banking partner already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve accounts list.",
        "parameters": [
          {
            "name": "bankingPartner",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BankingPartner"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "description": "One-based page number",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "description": "Page size",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account agreement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountResponseModelPageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve the account by identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "account is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/balances": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve balances for the account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountBalanceResponseModelCollectionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "account is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/sandbox/mixed-flow/start-wire-onramp": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create a wire onramp simulation on sandbox environments to Tenant's Account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Wire simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/sandbox/mixed-flow/start-wire-onramp": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create a wire onramp simulation on sandbox environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the client where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireOnrampRequestModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Wire simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/sandbox/start-incoming-wire": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create an incoming wire simulation on sandbox environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Wire simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/sandbox/start-incoming-wire-2": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create an incoming wire simulation on sandbox environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateWireRequestModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Wire simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/sandbox/start-incoming-crypto": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create an incoming crypto simulation on sandbox environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingCryptoRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingCryptoRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingCryptoRequestModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Crypto simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/sandbox/mixed-flow/start-incoming-ach": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create an incoming ach simulation on sandbox environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Incoming ACH simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/sandbox/mixed-flow/start-on-ramp-ach": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Create an incoming ach simulation with mocks enabled on test environments.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the client where to start simulation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateIncomingAchModel"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Incoming ACH simulation was successfully created."
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/deposit-instruction": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve deposit instruction for the account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountDepositInstructionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/onramp-instruction": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve on-ramp instruction for the account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "On-ramp instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiOnrampInstructionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/crypto-deposit-instruction/{network}/{assetFiatType}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve a crypto deposit instruction for the account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NetworkChain"
            }
          },
          {
            "name": "assetFiatType",
            "in": "path",
            "description": "Currencies allowed to operate with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyToOperate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crypto Deposit instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiAccountCryptoDepositInstructionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/payment-documents": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Upload payment documents for the account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "PaymentDocuments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "PaymentDocuments": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentDocumentResponsePageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounts"],
        "summary": "Retrieve payment documents for the account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentDocumentResponsePageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/virtual-account": {
      "put": {
        "tags": ["Accounts"],
        "summary": "Update an existing virtual account for the account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantVirtualAccountPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantVirtualAccountPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantVirtualAccountPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beneficial-owners": {
      "post": {
        "tags": ["BeneficialOwners"],
        "summary": "Create beneficial owner",
        "requestBody": {
          "description": "CreateBeneficialOwnerPublicApiRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBeneficialOwnerPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBeneficialOwnerPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBeneficialOwnerPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficialOwnerPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["BeneficialOwners"],
        "summary": "Get all beneficial owners",
        "parameters": [
          {
            "name": "ClientId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficialOwnerPublicApiResponseModelPageResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beneficial-owners/{id}": {
      "get": {
        "tags": ["BeneficialOwners"],
        "summary": "Get a single beneficial owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Beneficial owner identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficialOwnerPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["BeneficialOwners"],
        "summary": "Update the beneficial owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Beneficial owner identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "UpdateBeneficialOwnerPublicApiRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficialOwnerPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficialOwnerPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficialOwnerPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficialOwnerPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/individual": {
      "post": {
        "tags": ["Clients"],
        "summary": "Create new individual client.",
        "requestBody": {
          "description": "CreateIndividualClientPublicApiRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndividualClientPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndividualClientPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndividualClientPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualClientPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/individual": {
      "get": {
        "tags": ["Clients"],
        "summary": "Get an individual client by identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualClientPublicApiResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Clients"],
        "summary": "Update individual client.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIndividualClientPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIndividualClientPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIndividualClientPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualClientPublicApiResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/business": {
      "post": {
        "tags": ["Clients"],
        "summary": "Create new business client.",
        "requestBody": {
          "description": "CreateBusinessClientRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessClientPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessClientPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessClientPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessClientPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/business": {
      "patch": {
        "tags": ["Clients"],
        "summary": "Updates business client.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the client",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "CreateBusinessClientRequestModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessClientPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessClientPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessClientPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessClientPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Clients"],
        "summary": "Get a business client by identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessClientPublicApiResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients": {
      "get": {
        "tags": ["Clients"],
        "summary": "Get all clients",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalOrBusinessClientPublicApiResponseModelPageResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/terms-of-service": {
      "post": {
        "tags": ["Clients"],
        "summary": "Returns a link to terms of service.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID represents Client ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "forceAccept",
            "in": "query",
            "description": "Optional. False by default",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermsOfServicePublicApiResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/current-tenant": {
      "get": {
        "tags": ["CurrentTenant"],
        "summary": "Get current tenant",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantPublicApiResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/current-tenant/webhook-config": {
      "get": {
        "tags": ["CurrentTenant"],
        "summary": "Get webhooks configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfigResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["CurrentTenant"],
        "summary": "Update webhooks configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigPatchModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/current-tenant/balances": {
      "get": {
        "tags": ["CurrentTenant"],
        "summary": "Get balances",
        "responses": {
          "200": {
            "description": "Tenant balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiTenantBalanceModelCollectionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/current-tenant/crypto-instruction/{network}/{asset}": {
      "get": {
        "tags": ["CurrentTenant"],
        "summary": "Get crypto deposit instructions",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BalanceNetworkModel"
            }
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Currencies allowed to operate with",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BalanceCurrencyModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crypto deposit instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiTenantCryptoDepositInstructionModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/business-documents": {
      "post": {
        "tags": ["Documents"],
        "summary": "Upload business documents for the client.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["OwnershipDocument", "ProofOfCompanyFormation", "StatementOfFunds"],
                "type": "object",
                "properties": {
                  "StatementOfFunds": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "OwnershipDocument": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "ProofOfCompanyFormation": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "StatementOfFunds": {
                  "style": "form"
                },
                "OwnershipDocument": {
                  "style": "form"
                },
                "ProofOfCompanyFormation": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentPublicApiResponseModelPageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/individual-documents": {
      "post": {
        "tags": ["Documents"],
        "summary": "Upload individual documents for the client.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["GovIdCountry", "GovIdImageFront", "ProofOfAddress"],
                "type": "object",
                "properties": {
                  "ProofOfAddress": {
                    "type": "string",
                    "description": "Max size: 10.4 mb\r\nFilename should only contain ASCII chars\r\nAllowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdImageFront": {
                    "type": "string",
                    "description": "Max size: 10.4 mb\r\nFilename should only contain ASCII chars\r\nAllowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdImageBack": {
                    "type": "string",
                    "description": "Max size: 10.4 mb\r\nFilename should only contain ASCII chars\r\nAllowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdCountry": {
                    "type": "string",
                    "description": "ISO 3166-1 ALPHA-2 country code"
                  }
                }
              },
              "encoding": {
                "ProofOfAddress": {
                  "style": "form"
                },
                "GovIdImageFront": {
                  "style": "form"
                },
                "GovIdImageBack": {
                  "style": "form"
                },
                "GovIdCountry": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentPublicApiResponseModelPageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/additional-documents": {
      "post": {
        "tags": ["Documents"],
        "summary": "Upload Proof Of Address documents for the personal client.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["Document"],
                "type": "object",
                "properties": {
                  "Document": {
                    "type": "string",
                    "description": "Additional documents to upload",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Document": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalDocumentPublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beneficial-owners/{id}/additional-documents": {
      "post": {
        "tags": ["Documents"],
        "summary": "Upload additional documents for the beneficial owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["Document"],
                "type": "object",
                "properties": {
                  "Document": {
                    "type": "string",
                    "description": "Additional documents to upload",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Document": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalDocumentPublicApiResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beneficial-owners/{id}/documents": {
      "post": {
        "tags": ["Documents"],
        "summary": "Upload documents for beneficial owners.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["GovIdImageFront", "ProofOfAddress"],
                "type": "object",
                "properties": {
                  "ProofOfAddress": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdImageFront": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdImageBack": {
                    "type": "string",
                    "description": "- Max size: 10.4 mb\r\n- Filename should only contain ASCII chars\r\n- Allowed extensions: .JPEG, .JPG, .PNG, .HEIC",
                    "format": "binary"
                  },
                  "GovIdCountry": {
                    "type": "string",
                    "description": "ISO 3166-1 ALPHA-2 country code"
                  }
                }
              },
              "encoding": {
                "ProofOfAddress": {
                  "style": "form"
                },
                "GovIdImageFront": {
                  "style": "form"
                },
                "GovIdImageBack": {
                  "style": "form"
                },
                "GovIdCountry": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentPublicApiResponseModelPageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/exchange-rates": {
      "get": {
        "tags": ["ExchangeRates"],
        "summary": "Get exchange rates",
        "responses": {
          "200": {
            "description": "Exchange rates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRatePublicResponseModelCollectionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/external-accounts": {
      "post": {
        "tags": ["ExternalAccounts"],
        "summary": "Create external account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateWireAccountRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateWireAccountRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateWireAccountRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created external account model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiExternalAccountResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ExternalAccounts"],
        "summary": "Get all external accounts",
        "parameters": [
          {
            "name": "Level",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AccountLevel"
            }
          },
          {
            "name": "ClientId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ExternalAccountTypeFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "description": "One-based page number",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "description": "Page size",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External accounts successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiExternalAccountResponseModelPageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/external-accounts/global-connect": {
      "post": {
        "tags": ["ExternalAccounts"],
        "summary": "Create GlobalConnect external account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiGlobalConnectExternalAccountRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiGlobalConnectExternalAccountRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiGlobalConnectExternalAccountRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created external account model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiExternalAccountResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/external-accounts/international-wire": {
      "post": {
        "tags": ["ExternalAccounts"],
        "summary": "Create international wire external account for requested tenant or client.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateInternationalWireAccountRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateInternationalWireAccountRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateInternationalWireAccountRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created international wire external account model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiExternalAccountResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/external-accounts/{id}": {
      "get": {
        "tags": ["ExternalAccounts"],
        "summary": "Get a single external account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External account successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiExternalAccountResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/external-address-virtual-accounts": {
      "post": {
        "tags": ["ExternalAddressVirtualAccounts"],
        "summary": "Create a new external address virtual account for client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientExternalAddressVirtualAccountPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientExternalAddressVirtualAccountPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientExternalAddressVirtualAccountPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "External address virtual account created"
          }
        }
      },
      "put": {
        "tags": ["ExternalAddressVirtualAccounts"],
        "summary": "Update an existing external address virtual account for client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientExternalVirtualAccountPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientExternalVirtualAccountPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientExternalVirtualAccountPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Account created"
          }
        }
      }
    },
    "/api/v1/lists/countries": {
      "get": {
        "tags": ["Lists"],
        "summary": "Get list of countries",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeCountriesDataModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/crypto-to-fiat-usd": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create Virtual Account Payment",
        "description": "If an external account linked to client is passed to `externalAccountId` the payment will be executed on client's behalf",
        "requestBody": {
          "description": "Create crypto to fiat payment request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateCryptoToFiatPaymentRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateCryptoToFiatPaymentRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateCryptoToFiatPaymentRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created payment model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/global-connect": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create GlobalConnect payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateGlobalConnectPaymentRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateGlobalConnectPaymentRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCreateGlobalConnectPaymentRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created payment model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments": {
      "get": {
        "tags": ["Payments"],
        "summary": "Get all payments",
        "parameters": [
          {
            "name": "ClientId",
            "in": "query",
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AccountId",
            "in": "query",
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response with payments page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentResponseModelPageResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/{id}": {
      "get": {
        "tags": ["Payments"],
        "summary": "Get a single payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment response model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Payment was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/quote/deposit": {
      "post": {
        "tags": ["Payments"],
        "summary": "Calculate Virtual Account Deposit Quote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositQuoteRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositQuoteRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DepositQuoteRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote public api response model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotePublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/global-connect/quote": {
      "post": {
        "tags": ["Payments"],
        "summary": "Calculate GlobalConnect payment quote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConnectPaymentQuoteRequestModelPublicApi"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConnectPaymentQuoteRequestModelPublicApi"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConnectPaymentQuoteRequestModelPublicApi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote public api response model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConnectQuotePublicApiResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/crypto-to-fiat/wire/quote": {
      "post": {
        "tags": ["Payments"],
        "summary": "Calculate Virtual Account Wire Withdrawal Quote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote response model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/crypto-to-fiat/ach/quote": {
      "post": {
        "tags": ["Payments"],
        "summary": "Calculate Virtual Account ACH Withdrawal Quote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote response model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/crypto-to-fiat/international-wire/quote": {
      "post": {
        "tags": ["Payments"],
        "summary": "Calculate quote for international wire withdrawal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote response model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiCryptoToFiatQuoteResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/documents": {
      "post": {
        "tags": ["Payments"],
        "summary": "Upload payment documents",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "PaymentDocuments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "PaymentDocuments": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentDocumentResponsePageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Payments"],
        "summary": "Get all payment documents",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentDocumentResponsePageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/documents/{documentId}": {
      "get": {
        "tags": ["Payments"],
        "summary": "Get a single payment document",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentDocumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions",
        "parameters": [
          {
            "name": "ClientId",
            "in": "query",
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AccountId",
            "in": "query",
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PaymentId",
            "in": "query",
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "One-based page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response with transactions page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseModelPageResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/{id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get a single transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The transaction identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction response model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/{id}/proof-of-payment-documents/{publicId}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Public endpoint. Download proof of payment document by transaction id and public document id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "publicId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Create a new withdrawal transfer.",
        "requestBody": {
          "description": "Create transfer request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalTransferPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalTransferPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalTransferPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created transfer payment response model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiPaymentResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/quote/withdrawal": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Gets quote for crypto withdrawal.",
        "description": "This endpoint retrieves a quote for a cryptocurrency withdrawal, including the estimated transaction fee and total amount to be debited from the user's account based on the specified cryptocurrency and withdrawal amount.",
        "requestBody": {
          "description": "Request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoWithdrawalQuoteRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoWithdrawalQuoteRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApiCryptoWithdrawalQuoteRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote response model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiCryptoWithdrawalQuoteResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Request data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User with such auth identifier was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested resources were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/virtual-accounts": {
      "post": {
        "tags": ["VirtualAccounts"],
        "summary": "Create a new virtual account for client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientVirtualAccountRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientVirtualAccountRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientVirtualAccountRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiOnrampInstructionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Virtual account created"
          }
        }
      },
      "put": {
        "tags": ["VirtualAccounts"],
        "summary": "Update an existing virtual account for client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientVirtualAccountPublicApiRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientVirtualAccountPublicApiRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientVirtualAccountPublicApiRequestModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Virtual account updated"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "API key is invalid or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/virtual-accounts/{clientId}": {
      "get": {
        "tags": ["VirtualAccounts"],
        "summary": "Get a single virtual account",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual account instructions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiOnrampInstructionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/virtual-accounts/{id}/reactivate": {
      "put": {
        "tags": ["VirtualAccounts"],
        "summary": "Reactivate virtual account by client identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiOnrampInstructionResponseModel"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/virtual-accounts/{id}/deactivate": {
      "put": {
        "tags": ["VirtualAccounts"],
        "summary": "Deactivate virtual account by client identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicApiOnrampInstructionResponseModel"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallets": {
      "post": {
        "tags": ["Wallets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountWalletRequestPublicApi"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountWalletRequestPublicApi"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountWalletRequestPublicApi"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountWalletModelPublicApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Wallets"],
        "parameters": [
          {
            "name": "CustomerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/VirtualAccountWalletStatusModel"
            }
          },
          {
            "name": "Currency",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/VirtualAccountWalletCurrencyModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountWalletModelPublicApiCollectionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallets/{walletId}": {
      "get": {
        "tags": ["Wallets"],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountWalletModelPublicApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallets/{walletId}/deactivate": {
      "post": {
        "tags": ["Wallets"],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountWalletModelPublicApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountLevel": {
        "enum": ["Tenant", "Client"],
        "type": "string"
      },
      "AccountStatus": {
        "enum": ["Active", "Closed", "Suspended"],
        "type": "string"
      },
      "AccountType": {
        "enum": ["Business", "Personal"],
        "type": "string"
      },
      "AchInstructions": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "nullable": true
          },
          "receiverName": {
            "type": "string",
            "nullable": true
          },
          "receiverAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "receiverBankName": {
            "type": "string",
            "nullable": true
          },
          "receiverBankAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "refCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdditionalDocumentPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AddressModel": {
        "required": ["city", "country", "street1"],
        "type": "object",
        "properties": {
          "street1": {
            "minLength": 1,
            "type": "string"
          },
          "street2": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code (ZIP code). Required for `US` and `UK`.",
            "nullable": true
          },
          "city": {
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
            "nullable": true
          },
          "country": {
            "minLength": 1,
            "type": "string",
            "description": "2-Letter code"
          }
        },
        "additionalProperties": false,
        "description": "Address"
      },
      "AfricaConnectPaymentReason": {
        "enum": [
          "Gift",
          "Bills",
          "Groceries",
          "Travel",
          "Health",
          "Entertainment",
          "Housing",
          "SchoolAndFees",
          "Other"
        ],
        "type": "string"
      },
      "AssetType": {
        "enum": ["FiatCurrency", "CryptoCurrency"],
        "type": "string"
      },
      "BalanceCurrencyModel": {
        "enum": ["USDC", "USDT"],
        "type": "string",
        "description": "Currencies allowed to operate with"
      },
      "BalanceNetworkModel": {
        "enum": ["Mainnet", "Sepolia"],
        "type": "string"
      },
      "BankDataModel": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Bank name",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number",
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "description": "Routing number",
            "nullable": true
          },
          "accountType": {
            "type": "string",
            "description": "Account type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bank details"
      },
      "BankingPartner": {
        "enum": [
          "None",
          "Fortress",
          "ChinaConnectPartner2",
          "BitGo",
          "Bridge",
          "KeyrailsOnChainRouter",
          "ChinaConnectPartner1",
          "AfricaConnectPartner1"
        ],
        "type": "string"
      },
      "BankingPartnerAccountModel": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "bankingPartner": {
            "$ref": "#/components/schemas/BankingPartner"
          }
        },
        "additionalProperties": false
      },
      "BaseFiatInstructions": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "nullable": true
          },
          "receiverName": {
            "type": "string",
            "nullable": true
          },
          "receiverAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "receiverBankName": {
            "type": "string",
            "nullable": true
          },
          "receiverBankAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "refCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeneficialOwnerPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserIdentityStatus"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Plain phone number that only includes '+' sign. Example: `+13088726022`",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isSigner": {
            "type": "boolean"
          },
          "hasOwnership": {
            "type": "boolean"
          },
          "hasControl": {
            "type": "boolean"
          },
          "relationshipEstablishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeneficialOwnerPublicApiResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficialOwnerPublicApiResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "BridgeCountriesDataModel": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeCountryInfoModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BridgeCountryInfoModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "alpha3": {
            "type": "string",
            "nullable": true
          },
          "postalCodeFormat": {
            "type": "string",
            "nullable": true
          },
          "subdivisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeSubdivisionModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BridgeSubdivisionModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusinessClientPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "status": {
            "$ref": "#/components/schemas/TenantOrClientStatus"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/ComplianceStatus"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "sourceOfFunds": {
            "type": "string",
            "nullable": true
          },
          "beneficialOwners": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "signedAgreementId": {
            "type": "string",
            "nullable": true
          },
          "complianceRejectionReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceRejectionReasonResponse"
            },
            "nullable": true
          },
          "businessIndustryCode": {
            "type": "string",
            "nullable": true
          },
          "businessIndustry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusinessDocumentType": {
        "enum": ["Other", "ProofOfAddress", "ProofOfCompanyFormation"],
        "type": "string",
        "description": "The document type based on the size-profile of the ID according to ISO/IEC 7810."
      },
      "BusinessType": {
        "enum": ["Cooperative", "Corporation", "Llc", "Other", "Partnership", "SoleProp", "Trust"],
        "type": "string"
      },
      "ComplianceRejectionReasonResponse": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplianceStatus": {
        "enum": ["UnderReview", "Approved", "Rejected", "NotStarted", "Incomplete"],
        "type": "string"
      },
      "CreateAccountBankingPartner": {
        "enum": ["BitGo", "Fortress", "KeyrailsOnChainRouter"],
        "type": "string"
      },
      "CreateBeneficialOwnerPublicApiRequestModel": {
        "required": [
          "address",
          "birthDate",
          "email",
          "firstName",
          "hasControl",
          "hasOwnership",
          "isSigner",
          "lastName",
          "phone",
          "relationshipEstablishedAt",
          "taxIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Plain phone number that only includes '+' sign. Example: `+13088726022`"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "minLength": 1,
            "type": "string"
          },
          "birthDate": {
            "minLength": 1,
            "type": "string",
            "description": "Cannot be in the future or more than 130 years ago",
            "format": "date-time"
          },
          "isSigner": {
            "type": "boolean"
          },
          "hasOwnership": {
            "type": "boolean"
          },
          "hasControl": {
            "type": "boolean"
          },
          "relationshipEstablishedAt": {
            "minLength": 1,
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateBusinessClientPublicApiRequestModel": {
        "required": [
          "address",
          "beneficialOwners",
          "businessIndustryCode",
          "businessType",
          "description",
          "email",
          "name",
          "sourceOfFunds",
          "taxIdentificationNumber",
          "website"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "email": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          },
          "website": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "minLength": 1,
            "type": "string"
          },
          "sourceOfFunds": {
            "minLength": 1,
            "type": "string"
          },
          "businessIndustryCode": {
            "minLength": 1,
            "type": "string",
            "description": "The industry in which this business operates. Click [here](https://docs.keyrails.com/page/business-industry-list-2012-naics-codes) for the complete list of valid industries and codes"
          },
          "beneficialOwners": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateClientExternalAddressVirtualAccountPublicApiRequestModel": {
        "required": ["clientId", "cryptoAddress", "currency", "network"],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "cryptoAddress": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkForVirtualAccount"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyForVirtualAccount"
          },
          "destinationTag": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateClientVirtualAccountRequestModel": {
        "required": ["clientId"],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateExternalTransferPublicApiRequestModel": {
        "required": ["assetType", "to"],
        "type": "object",
        "properties": {
          "assetType": {
            "$ref": "#/components/schemas/AssetType"
          },
          "asset": {
            "$ref": "#/components/schemas/CryptoCurrencyModel"
          },
          "network": {
            "$ref": "#/components/schemas/CryptoNetworkModel"
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Amount of the asset to transfer",
            "format": "double"
          },
          "to": {
            "$ref": "#/components/schemas/CryptoWithdrawalDestinationModel"
          },
          "comment": {
            "maxLength": 1000,
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateIndividualClientPublicApiRequestModel": {
        "required": ["address", "birthDate", "email", "firstName", "lastName", "phone", "taxIdentificationNumber"],
        "type": "object",
        "properties": {
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Plain phone number that only includes '+' sign. Example: `+13088726022`"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "minLength": 1,
            "type": "string"
          },
          "birthDate": {
            "minLength": 1,
            "type": "string",
            "description": "Cannot be in the future or more than 130 years ago",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateVirtualAccountWalletRequestPublicApi": {
        "required": ["currency", "customerId"],
        "type": "object",
        "properties": {
          "customerId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/VirtualAccountWalletCurrencyModel"
          },
          "bvn": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptoCurrencyModel": {
        "enum": ["USDC", "USDT"],
        "type": "string"
      },
      "CryptoNetworkModel": {
        "enum": ["Mainnet", "Sepolia"],
        "type": "string"
      },
      "CryptoToFiatFundsStorageRequestModel": {
        "required": ["currency", "network"],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account Id",
            "format": "uuid",
            "nullable": true
          },
          "externalAccountId": {
            "type": "string",
            "description": "External account Id",
            "format": "uuid",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/CryptoToFiatPaymentCurrency"
          },
          "network": {
            "$ref": "#/components/schemas/CryptoToFiatPaymentNetwork"
          }
        },
        "additionalProperties": false
      },
      "CryptoToFiatPaymentCurrency": {
        "enum": ["Usdc"],
        "type": "string"
      },
      "CryptoToFiatPaymentNetwork": {
        "enum": ["Mainnet", "Sepolia"],
        "type": "string"
      },
      "CryptoToFiatTransactionFeeModel": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/CryptoCurrencyModel"
          },
          "network": {
            "$ref": "#/components/schemas/CryptoNetworkModel"
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptoWithdrawalDestinationModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier (Id for accounts, blockChain address for addresses)",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "description": "Wallet tag",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "USD",
          "USDC",
          "USDT",
          "CNY",
          "KES",
          "NGN",
          "BWP",
          "XAF",
          "MWK",
          "RWF",
          "TZS",
          "UGX",
          "ZMW",
          "ZAR",
          "XOF",
          "CDF",
          "AED",
          "EUR",
          "GBP"
        ],
        "type": "string"
      },
      "CurrencyForVirtualAccount": {
        "enum": ["USDC", "USDT"],
        "type": "string"
      },
      "CurrencyToOperate": {
        "enum": ["USD", "USDC", "USDT", "MATIC", "FLRNS", "ETH", "BTC"],
        "type": "string",
        "description": "Currencies allowed to operate with"
      },
      "CustomerType": {
        "enum": ["Individual", "Business"],
        "type": "string"
      },
      "DepositQuoteRequestModel": {
        "type": "object",
        "properties": {
          "depositType": {
            "$ref": "#/components/schemas/QuoteDepositType"
          },
          "amount": {
            "maximum": 100000000.0,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DocumentPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "identityId": {
            "type": "string",
            "format": "uuid"
          },
          "personalDocumentType": {
            "$ref": "#/components/schemas/PersonalDocumentType"
          },
          "businessDocumentType": {
            "$ref": "#/components/schemas/BusinessDocumentType"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentType"
          },
          "externalId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "externalReferenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "externalUuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "documentCheckStatus": {
            "$ref": "#/components/schemas/DocumentStatus"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isVerified": {
            "type": "boolean",
            "readOnly": true
          },
          "documentSides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSideModel"
            },
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "govIdCountry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentPublicApiResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentPublicApiResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "DocumentSideModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "documentId": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "sideType": {
            "$ref": "#/components/schemas/DocumentSideType"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentSideType": {
        "enum": ["Front", "Back", "Portrait"],
        "type": "string"
      },
      "DocumentStatus": {
        "enum": ["Pending", "AutomaticReviewInProgress", "ManualReviewNeeded", "Accepted", "Rejected", "Resubmit"],
        "type": "string"
      },
      "DocumentType": {
        "enum": [
          "Other",
          "ProofOfAddress",
          "ProofOfCompanyFormation",
          "License",
          "GovernmentID",
          "Passport",
          "AdditionalDocumentsOther",
          "AdditionalDocumentsProofOfAddress",
          "CertificateOfIncorporation",
          "ArticlesOfAssociation_Memorandum_Bylaws",
          "CertificateOfGoodStanding",
          "RegulatoryLicenses",
          "DirectorAndShareholderRegister",
          "W8W9Form",
          "StatementOfFunds",
          "OwnershipDocument"
        ],
        "type": "string",
        "description": "The document type"
      },
      "ExchangeRateCurrencyModel": {
        "enum": ["CNY", "NGN", "AED", "EUR", "GBP"],
        "type": "string"
      },
      "ExchangeRatePublicResponseModel": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/ExchangeRateCurrencyModel"
          },
          "exchangeRate": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExchangeRatePublicResponseModelCollectionResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExchangeRatePublicResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection response model"
      },
      "ExtendedFilter": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "description": "Gets or sets the filter property name.",
            "nullable": true
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "filterValue": {
            "type": "string",
            "description": "Gets or sets the filter value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Extended filter that supports operator applied to filtered value"
      },
      "ExtendedFiltersAndSortData": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedFilter"
            },
            "description": "Gets or sets the filters.",
            "nullable": true
          },
          "sortProperty": {
            "type": "string",
            "description": "Gets or sets the sort property.",
            "nullable": true
          },
          "sortDirection": {
            "$ref": "#/components/schemas/SortDirection"
          }
        },
        "additionalProperties": false,
        "description": "Represents abstraction of request filtering and sorting data"
      },
      "ExternalAccountFundsStorageModel": {
        "required": ["externalAccountId"],
        "type": "object",
        "properties": {
          "externalAccountId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ExternalAccountTypeFilter": {
        "enum": ["Ach", "Wire", "ChinaConnect", "InternationalWire", "GlobalConnect"],
        "type": "string"
      },
      "ExternalAccountTypeModel": {
        "enum": ["Financial", "Wire", "Ach", "InternationalWire", "ChinaConnect", "GlobalConnect"],
        "type": "string"
      },
      "FundsStorageResponseModel": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account Id",
            "format": "uuid",
            "nullable": true
          },
          "externalAccountId": {
            "type": "string",
            "description": "External account Id",
            "format": "uuid",
            "nullable": true
          },
          "incomingTransferOrigin": {
            "type": "string",
            "description": "Incoming transfer origin",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "depositMessage": {
            "type": "string",
            "description": "DepositMessage",
            "nullable": true
          },
          "cryptoAddress": {
            "type": "string",
            "description": "Crypto address",
            "nullable": true
          },
          "walletTag": {
            "type": "string",
            "description": "Wallet tag",
            "nullable": true
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorModel"
          },
          "imad": {
            "$ref": "#/components/schemas/ImadModel"
          },
          "clientId": {
            "type": "string",
            "description": "Client Id",
            "format": "uuid",
            "nullable": true
          },
          "clientType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "bankName": {
            "type": "string",
            "description": "For Africa connect deposit Source bank name",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "description": "For Africa connect deposit Source account name",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "description": "For china connect flow. This field is populated from the destination external account",
            "nullable": true
          },
          "senderCountry": {
            "type": "string",
            "description": "For china connect flow. This field is populated from the destination external account",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "For Africa connect deposit Source account number",
            "nullable": true
          },
          "referenceCode": {
            "type": "string",
            "description": "For Africa connect deposit Source reference code",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "For Africa connect mobile money First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "For Africa connect mobile money Last name",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "For Africa connect mobile money Phone",
            "nullable": true
          },
          "networkName": {
            "type": "string",
            "description": "For Africa connect payment Network name",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "For Africa connect payment Network id",
            "format": "uuid",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "format": "date-time",
            "nullable": true
          },
          "idNumber": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "idType": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "additionalIdNumber": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "additionalIdType": {
            "type": "string",
            "description": "For Africa connect individual sourse customer type",
            "nullable": true
          },
          "businessId": {
            "type": "string",
            "description": "For Africa connect business sourse customer type",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "description": "For Africa connect business sourse customer type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Funds storage response model"
      },
      "GetWalletsRequest": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/VirtualAccountWalletStatusModel"
          },
          "currency": {
            "$ref": "#/components/schemas/VirtualAccountWalletCurrencyModel"
          }
        },
        "additionalProperties": false
      },
      "GlobalConnectDestinationCurrencyModel": {
        "enum": ["USD", "AED"],
        "type": "string"
      },
      "GlobalConnectPaymentQuoteRequestModelPublicApi": {
        "required": ["amount", "receiverAmount", "source"],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/GlobalConnectSourceModel"
          },
          "amount": {
            "maximum": 100000000.0,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "receiverAmount": {
            "maximum": 100000000.0,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/GlobalConnectDestinationCurrencyModel"
          }
        },
        "additionalProperties": false
      },
      "GlobalConnectQuotePublicApiResponseModel": {
        "type": "object",
        "properties": {
          "transactionFee": {
            "$ref": "#/components/schemas/TransactionFeeResponseModel"
          },
          "paymentAmount": {
            "type": "number",
            "description": "Payment amount (without fee)",
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GlobalConnectSourceModel": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrencyModel"
          }
        },
        "additionalProperties": false
      },
      "ImadModel": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string",
            "description": "Unparsed (Raw) - Input Message Accountability Data: a unique number assigned to a wire\r\ntransfer processed through the Federal Reserve Bank’s FedwireService.",
            "nullable": true
          },
          "parsed": {
            "$ref": "#/components/schemas/ParsedImadModel"
          }
        },
        "additionalProperties": false,
        "description": "IMAD Sub-object"
      },
      "IndividualClientPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TenantOrClientStatus"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/ComplianceStatus"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "signedAgreementId": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "complianceRejectionReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceRejectionReasonResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkChain": {
        "enum": [
          "Mainnet",
          "Goerli",
          "OptimismMainnet",
          "PolygonMainnet",
          "FantomMainnet",
          "BitcoinMainnet",
          "BaseMainnet",
          "BitcoinTestnet",
          "SolanaMainnet",
          "SolanaDevnet",
          "AlgorandMainnet",
          "AlgorandTestnet",
          "StellarMainnet",
          "StellarTestnet",
          "ArbitrumMainnet",
          "AvalancheFuji",
          "AvalancheMainnet",
          "PolygonMumbai",
          "TronMainnet",
          "TronTestnet",
          "FlowMainnet",
          "FlowTestnet",
          "Sepolia"
        ],
        "type": "string"
      },
      "NetworkForVirtualAccount": {
        "enum": [
          "Mainnet",
          "OptimismMainnet",
          "PolygonMainnet",
          "BaseMainnet",
          "SolanaMainnet",
          "StellarMainnet",
          "ArbitrumMainnet",
          "AvalancheMainnet",
          "Sepolia"
        ],
        "type": "string"
      },
      "Operator": {
        "enum": ["Eq", "Cont", "Gt", "Lt", "In", "Intersects"],
        "type": "string",
        "description": "Query operator."
      },
      "OriginatorModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Originator name",
            "nullable": true
          },
          "addressRaw": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Originator address raw",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "bankData": {
            "$ref": "#/components/schemas/BankDataModel"
          }
        },
        "additionalProperties": false,
        "description": "A Wire Bank sub-object containing information about the wire originator"
      },
      "PageMetadata": {
        "type": "object",
        "properties": {
          "pageCount": {
            "type": "integer",
            "description": "Total count of pages for this data",
            "format": "int32"
          },
          "resourceCount": {
            "type": "integer",
            "description": "Total count of items in this data",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents metadata of pagination"
      },
      "ParsedImadModel": {
        "type": "object",
        "properties": {
          "cycleDate": {
            "type": "string",
            "description": "CycleDate - wire transfer date",
            "format": "date-time",
            "nullable": true
          },
          "inputSource": {
            "type": "string",
            "description": "InputSource - 8 Alpha or Alpha-Numeric characters identifying the source",
            "nullable": true
          },
          "inputSequenceNumber": {
            "type": "string",
            "description": "InputSequenceNumber - a 6 digit number assigned for uniqueness",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Parsed IMAD Sub-object"
      },
      "PaymentRail": {
        "enum": ["None", "Wire", "Ach"],
        "type": "string"
      },
      "PaymentStatus": {
        "enum": ["New", "Completed"],
        "type": "string"
      },
      "PaymentType": {
        "enum": [
          "Internal",
          "AchDeposit",
          "AchWithdrawal",
          "WireDeposit",
          "WireWithdrawal",
          "InternationalWireWithdrawal",
          "WireDepositReturn",
          "WireWithdrawalReturn",
          "WireDepositReverse",
          "WireWithdrawalReverse",
          "WireDepositPartialReturn",
          "IncomingAchDeposit",
          "IncomingAchWithdrawal",
          "AchDepositReturn",
          "AchWithdrawalReturn",
          "AchDepositReverse",
          "AchWithdrawalReverse",
          "BuyCrypto",
          "SellCrypto",
          "DepositCrypto",
          "WithdrawalCrypto",
          "InternalCrypto",
          "RevenueWithdrawal",
          "Revenue",
          "ClientRevenue",
          "SettlementChinaConnect",
          "ChinaConnectWireWithdrawal",
          "ChinaConnectWireDeposit",
          "AchDepositUsdc",
          "AchWithdrawalUsdc",
          "WireWithdrawalUsdc",
          "WireDepositUsdc",
          "SettlementChinaConnectUsdc",
          "InternationalWireWithdrawalUsdc",
          "AfricaConnectDepositMobileMoney",
          "AfricaConnectDepositBankTransfer",
          "AfricaConnectWithdrawalMobileMoney",
          "AfricaConnectWithdrawalBankTransfer",
          "SettlementGlobalConnectUsdc",
          "SettlementGlobalConnectUsdt",
          "NgnDepositUsdc",
          "RefundWithdrawal",
          "Refund"
        ],
        "type": "string"
      },
      "PersonalDocumentType": {
        "enum": ["License", "GovernmentID", "Passport"],
        "type": "string",
        "description": "The document type based on the size-profile of the ID according to ISO/IEC 7810."
      },
      "PersonalOrBusinessClientPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "status": {
            "$ref": "#/components/schemas/TenantOrClientStatus"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/ComplianceStatus"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "sourceOfFunds": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isSuspended": {
            "type": "boolean"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "signedAgreementId": {
            "type": "string",
            "nullable": true
          },
          "complianceRejectionReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceRejectionReasonResponse"
            },
            "nullable": true
          },
          "beneficialOwners": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "businessIndustryCode": {
            "type": "string",
            "nullable": true
          },
          "businessIndustry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonalOrBusinessClientPublicApiResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalOrBusinessClientPublicApiResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PublicApiAccountBalanceResponseModel": {
        "type": "object",
        "properties": {
          "assetFiatType": {
            "$ref": "#/components/schemas/Currency"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkChain"
          },
          "disbursable": {
            "type": "number",
            "format": "double"
          },
          "locked": {
            "type": "number",
            "format": "double"
          },
          "pending": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PublicApiAccountBalanceResponseModelCollectionResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiAccountBalanceResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection response model"
      },
      "PublicApiAccountCryptoDepositInstructionResponseModel": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "assetFiatType": {
            "$ref": "#/components/schemas/Currency"
          },
          "networkChain": {
            "$ref": "#/components/schemas/NetworkChain"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiAccountDepositInstructionResponseModel": {
        "type": "object",
        "properties": {
          "wire": {
            "$ref": "#/components/schemas/BaseFiatInstructions"
          },
          "ach": {
            "$ref": "#/components/schemas/AchInstructions"
          }
        },
        "additionalProperties": false
      },
      "PublicApiAccountResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "format": "uuid"
          },
          "bankingPartnerAccountId": {
            "type": "string",
            "description": "Banking partner account identifier",
            "nullable": true
          },
          "bankingPartnerAccountNumber": {
            "type": "string",
            "description": "Banking partner AccountNumber",
            "nullable": true
          },
          "bankingPartner": {
            "$ref": "#/components/schemas/BankingPartner"
          },
          "type": {
            "type": "string",
            "description": "Type",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "description": "Created at UTC.",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "description": "Updated at UTC.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          }
        },
        "additionalProperties": false
      },
      "PublicApiAccountResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiAccountResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "PublicApiAccountsRequestFilter": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "One-based page number",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size",
            "format": "int32"
          },
          "extendedFiltersAndSortData": {
            "$ref": "#/components/schemas/ExtendedFiltersAndSortData"
          },
          "bankingPartner": {
            "$ref": "#/components/schemas/BankingPartner"
          }
        },
        "additionalProperties": false
      },
      "PublicApiCreateAccountRequestModel": {
        "required": ["clientId"],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "bankingPartner": {
            "$ref": "#/components/schemas/CreateAccountBankingPartner"
          }
        },
        "additionalProperties": false
      },
      "PublicApiCreateCryptoToFiatPaymentRequestModel": {
        "required": ["amount", "destination", "paymentRail", "source"],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/CryptoToFiatFundsStorageRequestModel"
          },
          "destination": {
            "$ref": "#/components/schemas/ExternalAccountFundsStorageModel"
          },
          "amount": {
            "maximum": 100000000.0,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "appliedFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "comment": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "paymentRail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "memo": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiCreateGlobalConnectPaymentRequestModel": {
        "required": ["amount", "destination", "documentIds", "source"],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/GlobalConnectSourceModel"
          },
          "destination": {
            "$ref": "#/components/schemas/ExternalAccountFundsStorageModel"
          },
          "amount": {
            "maximum": 100000000.0,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "memo": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "documentIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Document ids should contain unique values and at least one element"
          },
          "currency": {
            "$ref": "#/components/schemas/GlobalConnectDestinationCurrencyModel"
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "senderCountry": {
            "type": "string",
            "description": "ISO 3166-1 ALPHA-2 country code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiCreateInternationalWireAccountRequestModel": {
        "required": [
          "iban",
          "purposeOfFunds",
          "receiverAddress",
          "receiverBankAddress",
          "receiverBankName",
          "receiverName",
          "shortBusinessDescription",
          "swiftCode"
        ],
        "type": "object",
        "properties": {
          "receiverBankName": {
            "minLength": 1,
            "type": "string"
          },
          "shortBusinessDescription": {
            "minLength": 1,
            "type": "string"
          },
          "swiftCode": {
            "minLength": 1,
            "type": "string"
          },
          "iban": {
            "minLength": 1,
            "type": "string"
          },
          "purposeOfFunds": {
            "minLength": 1,
            "type": "string"
          },
          "receiverName": {
            "minLength": 1,
            "type": "string"
          },
          "receiverAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "receiverBankAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiCreateWireAccountRequestModel": {
        "required": ["accountNumber", "receiverAddress", "receiverBankName", "receiverName", "routingNumber"],
        "type": "object",
        "properties": {
          "accountNumber": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Bank account number"
          },
          "routingNumber": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "^$|((0[0-9])|(1[0-2])|(2[1-9])|(3[0-2])|(6[1-9])|(7[0-2])|80)([0-9]{7})",
            "type": "string",
            "description": "Valid 9-digit ABA routing transit number associated with the account.",
            "example": "122105155"
          },
          "receiverName": {
            "minLength": 1,
            "type": "string",
            "description": "Receiver name"
          },
          "receiverAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "receiverBankName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Receiver bank name"
          },
          "receiverBankAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiCryptoToFiatQuoteRequestModel": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "`amount` and `receiverAmount` at the same time are not supported",
            "format": "double",
            "nullable": true
          },
          "receiverAmount": {
            "type": "number",
            "description": "`amount` and `receiverAmount` at the same time are not supported",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiCryptoToFiatQuoteResponseModel": {
        "type": "object",
        "properties": {
          "paymentAmount": {
            "type": "number",
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "transactionFee": {
            "$ref": "#/components/schemas/CryptoToFiatTransactionFeeModel"
          }
        },
        "additionalProperties": false
      },
      "PublicApiCryptoWithdrawalQuoteRequestModel": {
        "required": ["sourceAccountId"],
        "type": "object",
        "properties": {
          "sourceAccountId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "Value to deposit. Required if `receiverAmount` is not provided. Only `amount` or `receiverAmount` should be provided at the same time.",
            "format": "double",
            "nullable": true
          },
          "receiverAmount": {
            "type": "number",
            "description": "Value to receive. Required if `amount` is not provided. Only `amount` or `receiverAmount` should be provided at the same time.",
            "format": "double",
            "nullable": true
          },
          "asset": {
            "$ref": "#/components/schemas/CryptoCurrencyModel"
          }
        },
        "additionalProperties": false
      },
      "PublicApiCryptoWithdrawalQuoteResponseModel": {
        "type": "object",
        "properties": {
          "paymentAmount": {
            "type": "number",
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "transactionFee": {
            "$ref": "#/components/schemas/TransactionFeeResponseModel"
          }
        },
        "additionalProperties": false
      },
      "PublicApiExternalAccountResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/ExternalAccountTypeModel"
          },
          "accountNumberLast4": {
            "type": "string",
            "nullable": true
          },
          "receiverName": {
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "swiftCode": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PublicApiExternalAccountResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiExternalAccountResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "PublicApiExternalAccountsRequestFilter": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "One-based page number",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size",
            "format": "int32"
          },
          "extendedFiltersAndSortData": {
            "$ref": "#/components/schemas/ExtendedFiltersAndSortData"
          },
          "level": {
            "$ref": "#/components/schemas/AccountLevel"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ExternalAccountTypeFilter"
          }
        },
        "additionalProperties": false
      },
      "PublicApiGlobalConnectExternalAccountRequestModel": {
        "required": [
          "beneficiaryAccountNumber",
          "beneficiaryAddress",
          "beneficiaryBankAddress",
          "beneficiaryBankName",
          "beneficiaryBic",
          "beneficiaryIban",
          "beneficiaryName",
          "beneficiaryPhoneNumber"
        ],
        "type": "object",
        "properties": {
          "beneficiaryAccountNumber": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Required if `beneficiaryIban` is not provided"
          },
          "beneficiaryIban": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Required if `beneficiaryAccountNumber` is not provided"
          },
          "beneficiaryName": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "beneficiaryAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "beneficiaryBankName": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "beneficiaryBic": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "beneficiaryBankAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "beneficiaryCompanyRegistrationNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "beneficiaryCompanyRegistrationDate": {
            "type": "string",
            "description": "A date in the YYYY-MM-DD format.",
            "nullable": true
          },
          "beneficiaryPhoneNumber": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "senderCountry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiOnrampInstructionResponseModel": {
        "type": "object",
        "properties": {
          "receiverBankName": {
            "type": "string",
            "nullable": true
          },
          "receiverName": {
            "type": "string",
            "nullable": true
          },
          "receiverBankAddress": {
            "type": "string",
            "nullable": true
          },
          "receiverBankBeneficiaryAddress": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyForVirtualAccount"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkForVirtualAccount"
          },
          "cryptoAddress": {
            "type": "string",
            "nullable": true
          },
          "destinationTag": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiPaymentDocumentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "originalFileName": {
            "type": "string",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PublicApiPaymentDocumentResponsePageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiPaymentDocumentResponse"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "PublicApiPaymentResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment identifier",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "source": {
            "$ref": "#/components/schemas/FundsStorageResponseModel"
          },
          "destination": {
            "$ref": "#/components/schemas/FundsStorageResponseModel"
          },
          "onBehalfOfClientId": {
            "type": "string",
            "description": "On behalf of client identifier",
            "format": "uuid",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "destinationCurrency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "network": {
            "$ref": "#/components/schemas/TransactionNetworkResponseModel"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double",
            "nullable": true
          },
          "cryptoAmount": {
            "type": "number",
            "description": "Crypto amount",
            "format": "double",
            "nullable": true
          },
          "appliedFee": {
            "type": "number",
            "description": "Applied fee",
            "format": "double",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo",
            "nullable": true
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of payment",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction Hash",
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/AfricaConnectPaymentReason"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when payment was created",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when payment was updated",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicApiPaymentResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiPaymentResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "PublicApiTenantBalanceModel": {
        "type": "object",
        "properties": {
          "assetFiatType": {
            "$ref": "#/components/schemas/BalanceCurrencyModel"
          },
          "asset": {
            "$ref": "#/components/schemas/BalanceCurrencyModel"
          },
          "network": {
            "$ref": "#/components/schemas/BalanceNetworkModel"
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PublicApiTenantBalanceModelCollectionResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicApiTenantBalanceModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection response model"
      },
      "PublicApiTenantCryptoDepositInstructionModel": {
        "type": "object",
        "properties": {
          "assetFiatType": {
            "$ref": "#/components/schemas/BalanceCurrencyModel"
          },
          "asset": {
            "$ref": "#/components/schemas/BalanceCurrencyModel"
          },
          "networkChain": {
            "$ref": "#/components/schemas/BalanceNetworkModel"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteDepositType": {
        "enum": ["AchDepositUsdc", "WireDepositUsdc"],
        "type": "string"
      },
      "QuotePublicApiResponseModel": {
        "type": "object",
        "properties": {
          "transactionFee": {
            "$ref": "#/components/schemas/TransactionFeeResponseModel"
          },
          "paymentAmount": {
            "type": "number",
            "description": "Payment amount (without fee)",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SimulateIncomingAchModel": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "origin": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulateIncomingCryptoRequestModel": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulateWireOnrampRequestModel": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "routingNumber": {
            "type": "string",
            "nullable": true
          },
          "beneficiaryName": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "imad": {
            "type": "string",
            "nullable": true
          },
          "omad": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulateWireRequestModel": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "format": "double"
          },
          "origin": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "originator": {
            "$ref": "#/components/schemas/WireOriginatorModel"
          },
          "bankData": {
            "$ref": "#/components/schemas/WireBankDataModel"
          }
        },
        "additionalProperties": false
      },
      "SortDirection": {
        "enum": ["Asc", "Desc"],
        "type": "string",
        "description": "Sort direction"
      },
      "TenantOrClientStatus": {
        "enum": ["Active", "Inactive", "InactivationStarted", "Suspended", "Closed"],
        "type": "string"
      },
      "TenantPublicApiResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tenant identifier",
            "format": "uuid"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name",
            "nullable": true
          },
          "companyEmail": {
            "type": "string",
            "description": "Company email",
            "nullable": true
          },
          "countryOfRegistration": {
            "type": "string",
            "description": "Country Of Registration",
            "nullable": true
          },
          "companyRegistrationDate": {
            "type": "string",
            "description": "Company registration date",
            "nullable": true
          },
          "companyRegistrationNumber": {
            "type": "string",
            "description": "Company registration number",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TenantOrClientStatus"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/ComplianceStatus"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankingPartnerAccountModel"
            },
            "description": "Tenant accounts from different banking partners.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when tenant was created",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TermsOfServicePublicApiResponseModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionCurrencyResponseModel": {
        "enum": [
          "USD",
          "USDC",
          "USDT",
          "CNY",
          "KES",
          "NGN",
          "BWP",
          "XAF",
          "MWK",
          "RWF",
          "TZS",
          "UGX",
          "ZMW",
          "ZAR",
          "XOF",
          "CDF",
          "AED",
          "EUR",
          "GBP"
        ],
        "type": "string"
      },
      "TransactionFeeResponseModel": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Currency"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkChain"
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionNetworkResponseModel": {
        "enum": [
          "Mainnet",
          "OptimismMainnet",
          "PolygonMainnet",
          "BaseMainnet",
          "SolanaMainnet",
          "AlgorandMainnet",
          "StellarMainnet",
          "ArbitrumMainnet",
          "AvalancheMainnet",
          "Sepolia"
        ],
        "type": "string"
      },
      "TransactionResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction identifier",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentId": {
            "type": "string",
            "description": "Payment identifier",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/FundsStorageResponseModel"
          },
          "destination": {
            "$ref": "#/components/schemas/FundsStorageResponseModel"
          },
          "onBehalfOfClientId": {
            "type": "string",
            "description": "On behalf of client identifier",
            "format": "uuid",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "destinationCurrency": {
            "$ref": "#/components/schemas/TransactionCurrencyResponseModel"
          },
          "network": {
            "$ref": "#/components/schemas/TransactionNetworkResponseModel"
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double",
            "nullable": true
          },
          "cryptoAmount": {
            "type": "number",
            "description": "Crypto amount",
            "format": "double",
            "nullable": true
          },
          "transactionFee": {
            "type": "number",
            "description": "Keyrails fee amount",
            "format": "double"
          },
          "appliedFee": {
            "type": "number",
            "description": "Tenant fee amount",
            "format": "double",
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo",
            "nullable": true
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of payment",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "returnCode": {
            "type": "string",
            "description": "ACH return code",
            "nullable": true
          },
          "executedPrice": {
            "type": "number",
            "description": "Executed price",
            "format": "double",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction Hash",
            "nullable": true
          },
          "mainTransactionId": {
            "type": "string",
            "description": "Main transaction identifier",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when transaction was created",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when transaction was updated",
            "format": "date-time",
            "nullable": true
          },
          "documentIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Ids of attached documents for Settlement ChinaConnect",
            "nullable": true
          },
          "confirmationDocumentUrl": {
            "type": "string",
            "description": "URL of attached proof of payment document for Settlement GlobalConnect",
            "nullable": true
          },
          "bankingPartner": {
            "$ref": "#/components/schemas/BankingPartner"
          },
          "gasFeeUsd": {
            "type": "number",
            "description": "Gas fee for the crypto transaction, converted to USD",
            "format": "double",
            "nullable": true
          },
          "returnReason": {
            "type": "string",
            "description": "Return reason",
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/AfricaConnectPaymentReason"
          },
          "customerType": {
            "$ref": "#/components/schemas/CustomerType"
          },
          "receiverAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "refundForTransactionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isRefunded": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TransactionResponseModelPageResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionResponseModel"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Response with pagination information"
      },
      "TransactionStatus": {
        "enum": [
          "New",
          "Processing",
          "Completed",
          "Failed",
          "Pending",
          "Aborted",
          "InProgress",
          "Cancelled",
          "InReview"
        ],
        "type": "string"
      },
      "UpdateBeneficialOwnerPublicApiRequestModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isSigner": {
            "type": "boolean",
            "nullable": true
          },
          "hasOwnership": {
            "type": "boolean",
            "nullable": true
          },
          "hasControl": {
            "type": "boolean",
            "nullable": true
          },
          "relationshipEstablishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateBusinessClientPublicApiRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "businessIndustryCode": {
            "type": "string",
            "nullable": true
          },
          "beneficialOwners": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateClientExternalVirtualAccountPublicApiRequestModel": {
        "required": ["clientId", "cryptoAddress", "currency", "network"],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "cryptoAddress": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkForVirtualAccount"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyForVirtualAccount"
          },
          "destinationTag": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateClientVirtualAccountPublicApiRequestModel": {
        "required": ["clientId", "currency"],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyForVirtualAccount"
          }
        },
        "additionalProperties": false
      },
      "UpdateIndividualClientPublicApiRequestModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTenantVirtualAccountPublicApiRequestModel": {
        "required": ["currency"],
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CurrencyForVirtualAccount"
          }
        },
        "additionalProperties": false
      },
      "UserIdentityStatus": {
        "enum": ["Active", "Inactive", "InactivationStarted"],
        "type": "string"
      },
      "VirtualAccountWalletCurrencyModel": {
        "enum": ["None", "Usd", "Ngn"],
        "type": "string"
      },
      "VirtualAccountWalletDepositInstructionModelPublicApi": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/VirtualAccountWalletCurrencyModel"
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "bankAddress": {
            "type": "string",
            "nullable": true
          },
          "bankBeneficiaryName": {
            "type": "string",
            "nullable": true
          },
          "bankBeneficiaryAddress": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankRoutingNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VirtualAccountWalletModelPublicApi": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/VirtualAccountWalletStatusModel"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "bvn": {
            "type": "string",
            "nullable": true
          },
          "depositInstruction": {
            "$ref": "#/components/schemas/VirtualAccountWalletDepositInstructionModelPublicApi"
          }
        },
        "additionalProperties": false
      },
      "VirtualAccountWalletModelPublicApiCollectionResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualAccountWalletModelPublicApi"
            },
            "description": "Gets or sets the data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection response model"
      },
      "VirtualAccountWalletStatusModel": {
        "enum": ["Activated", "Deactivated"],
        "type": "string"
      },
      "WebhookConfigPatchModel": {
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 1000,
            "minLength": 3,
            "type": "string",
            "description": "Webhook url.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this webhook config is enabled.",
            "nullable": true
          },
          "sharedSecret": {
            "maxLength": 1000,
            "minLength": 8,
            "type": "string",
            "description": "Shared secret.",
            "nullable": true
          },
          "webhookTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookType"
            },
            "description": "List of types we support `Transaction` `Document` `Payment` `Identity`",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Webhook config patch model"
      },
      "WebhookConfigResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "description": "Gets or sets the client identifier.",
            "format": "uuid"
          },
          "url": {
            "type": "string",
            "description": "Gets or sets the URL.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this Keyrails.BankingApi.Application.Models.Webhooks.WebhookConfigResponseModel is enabled."
          },
          "sharedSecret": {
            "type": "string",
            "description": "Gets or sets the shared secret.",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "description": "Gets or sets the created at UTC.",
            "format": "date-time"
          },
          "updatedAtUtc": {
            "type": "string",
            "description": "Gets or sets the updated at UTC.",
            "format": "date-time",
            "nullable": true
          },
          "webhookTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookType"
            },
            "description": "Gets or sets the webhook types.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Webhook config API response model"
      },
      "WebhookType": {
        "enum": ["Payment", "Transaction", "Kyc", "Document", "CustodialAccount", "ExternalAccount", "Identity"],
        "type": "string",
        "description": "The type of a webhook"
      },
      "WireBankDataModel": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WireOriginatorModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JSON Web Token based security",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
